;; -*- lisp -*-

;;;; STUMPWM CONFIG
(in-package :stumpwm)

;;; Basic Settings
(set-prefix-key (kbd "s-x"))

(setf *mouse-focus-policy* :sloppy)

;;; Load stumpwm-contrib
;; cd ~/.config && git submodule init && git submodule update --checkout
(init-load-path #p"~/.config/stumpwm/modules/")

;;; Font Configuration
;;; https://config.phundrak.com/stumpwm.html
(ql:quickload :clx-truetype)
(load-module "ttf-fonts")

(set-font (list (make-instance 'xft:font
                                :family "Fira Code Retina"
                                :subfamily "Regular"
                                :size 10)))

;;; Keybindings
(define-key STUMPWM::*tile-group-root-map* (kbd "0") "remove")
(define-key STUMPWM::*tile-group-root-map* (kbd "1") "only")
(define-key STUMPWM::*tile-group-root-map* (kbd "2") "vsplit")
(define-key STUMPWM::*tile-group-root-map* (kbd "3") "hsplit")

(undefine-key STUMPWM::*tile-group-root-map* (kbd "R"))
(undefine-key STUMPWM::*tile-group-root-map* (kbd "Q"))
(undefine-key STUMPWM::*tile-group-root-map* (kbd "s"))
(undefine-key STUMPWM::*tile-group-root-map* (kbd "S"))

(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")

(undefine-key *root-map* (kbd "F1"))
(undefine-key *root-map* (kbd "F2"))
(undefine-key *root-map* (kbd "F3"))
(undefine-key *root-map* (kbd "F4"))
(undefine-key *root-map* (kbd "F5"))
(undefine-key *root-map* (kbd "F6"))
(undefine-key *root-map* (kbd "F7"))
(undefine-key *root-map* (kbd "F8"))
(undefine-key *root-map* (kbd "F9"))
(undefine-key *root-map* (kbd "F10"))

(undefine-key *root-map* (kbd "!"))

(define-key *root-map* (kbd "s-f") "exec rofi -show run")

(undefine-key *root-map* (kbd "m"))

(define-key *root-map* (kbd "m") "mode-line")

(undefine-key *root-map* (kbd "b"))

(define-key *root-map* (kbd "b") "pull-from-windowlist")

(define-key *root-map* (kbd "s-b") "pull-from-windowlist")

;;; Groups
(grename "1")
(gnewbg "2")
(gnewbg "3")
(gnewbg "4")
(gnewbg "5")

;;; Modeline
(setf *mode-line-position* :bottom)

(setf *time-modeline-string* "^B%a|%b %d|%I:%M%P^b")

(setf *group-format* "^B[%t]^b")
(setf *window-format* "%m%50t")

(setf *screen-mode-line-format*
      (list "%g"   ; groups
	    "%W"   ; windows
            "^>"   ; right align
            "%d")) ; time/date

(toggle-mode-line (current-screen)
                  (current-head))

;;; Autostart programs
(run-shell-command "picom")
(run-shell-command "nitrogen --restore")

(define-fullscreen-in-frame-rule my-default-rule (win)
  t)

;;; SLY setup
;; Sly setup tank from Gavin Freeborn:
;; https://github.com/Gavinok/stump-conf/blob/main/config
(ql:quickload :slynk)
(defvar *slynk-port* slynk::default-server-port)
(defparameter *stumpwm-slynk-session* nil)

(defcommand start-slynk (&optional (port *slynk-port*)) ()
  (handler-case
      (defparameter *stumpwm-slynk-session*
        (slynk:create-server
         :dont-close t
         :port port))
    (error (c)
      (format *error-output* "Error starting slynk: ~a~%" c)
      )))

(defcommand restart-slynk () ()
  "Restart Slynk and reload source.
This is needed if Sly updates while StumpWM is running"
  (stop-slynk)
  (start-slynk))

(defcommand stop-slynk () ()
  "Restart Slynk and reload source.
This is needed if Sly updates while StumpWM is running"
  (slynk:stop-server *slynk-port*))

(defcommand connect-to-sly () ()
  (unless *stumpwm-slynk-session*
    (start-slynk))
  (exec-el (sly-connect "localhost" *slynk-port*))
  (emacs))
