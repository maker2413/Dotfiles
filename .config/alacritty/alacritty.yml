---
# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 6
    y: 6

  # Background opacity
  #
  # Window opacity as a floating point number from `0.0` to `1.0`.
  # The value `0.0` is completely transparent and `1.0` is opaque.
  opacity: 0.98

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized

  # Window title
  title: Alacritty

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Scrolling distance multiplier.
  # multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Bold Italic

  # Point size
  size: 11.0

  # Offset is the extra space around each character. `offset.y` can be thought
  # of as modifying the line spacing, and `offset.x` as modifying the letter
  # spacing.
  offset:
    x: 0
    y: 1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the
  # right, increasing `y` moves the glyph upward.
  glyph_offset:
    x: 0
    y: 0

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (Tomorrow Night)
colors:
  # Default colors
  primary:
    background: '#1d1f21'
    foreground: '#c5c8c6'

  # Normal colors
  normal:
    black: '#000000'
    red: '#cc0403'
    green: '#19cb00'
    yellow: '#cecb00'
    blue: '#0d73cc'
    magenta: '#cb1ed1'
    cyan: '#0dcdcd'
    white: '#dddddd'

  # Bright colors
  bright:
    black: '#767676'
    red: '#f2201f'
    green: '#23fd00'
    yellow: '#fffd00'
    blue: '#1a8fff'
    magenta: '#fd28ff'
    cyan: '#14ffff'
    white: '#ffffff'

# Live config reload (changes require restart)
live_config_reload: true

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  - {key: Paste, action: Paste}
  - {key: Copy, action: Copy}
  # - { key: L,         mods: Control,                    action: ClearLogNotice }
  # - { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
  - {key: PageUp, mods: Shift, mode: ~Alt, action: ScrollPageUp}
  - {key: PageDown, mods: Shift, mode: ~Alt, action: ScrollPageDown}
  - {key: Home, mods: Shift, mode: ~Alt, action: ScrollToTop}
  - {key: End, mods: Shift, mode: ~Alt, action: ScrollToBottom}

  # Search Mode
  # - { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
  # - { key: Escape,                mode: Search,     action: SearchCancel          }
  # - { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
  # - { key: U,      mods: Control, mode: Search,     action: SearchClear           }
  # - { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
  # - { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
  # - { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
  # - { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
  # - { key: Down,                  mode: Search,     action: SearchHistoryNext     }
  # - { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
  # - { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

  # (Windows, Linux, and BSD only)
  # - { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
  # - { key: C,              mods: Control|Shift,                   action: Copy             }
  # - { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
  # - { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
  # - { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
  # - { key: Insert,         mods: Shift,                           action: PasteSelection   }
  # - { key: Key0,           mods: Control,                         action: ResetFontSize    }
  # - { key: Equals,         mods: Control,                         action: IncreaseFontSize }
  # - { key: Plus,           mods: Control,                         action: IncreaseFontSize }
  # - { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
  # - { key: Minus,          mods: Control,                         action: DecreaseFontSize }
  # - { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }

  # (Windows only)
  # - { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  # - { key: K,              mods: Command, mode: ~Vi|~Search, chars: "\x0c"                 }
  # - { key: K,              mods: Command, mode: ~Vi|~Search, action: ClearHistory          }
  # - { key: Key0,           mods: Command,                    action: ResetFontSize         }
  # - { key: Equals,         mods: Command,                    action: IncreaseFontSize      }
  # - { key: Plus,           mods: Command,                    action: IncreaseFontSize      }
  # - { key: NumpadAdd,      mods: Command,                    action: IncreaseFontSize      }
  # - { key: Minus,          mods: Command,                    action: DecreaseFontSize      }
  # - { key: NumpadSubtract, mods: Command,                    action: DecreaseFontSize      }
  # - { key: V,              mods: Command,                    action: Paste                 }
  # - { key: C,              mods: Command,                    action: Copy                  }
  # - { key: C,              mods: Command, mode: Vi|~Search,  action: ClearSelection        }
  # - { key: H,              mods: Command,                    action: Hide                  }
  # - { key: H,              mods: Command|Alt,                action: HideOtherApplications }
  # - { key: M,              mods: Command,                    action: Minimize              }
  # - { key: Q,              mods: Command,                    action: Quit                  }
  # - { key: W,              mods: Command,                    action: Quit                  }
  # - { key: N,              mods: Command,                    action: SpawnNewInstance      }
  # - { key: F,              mods: Command|Control,            action: ToggleFullscreen      }
  # - { key: F,              mods: Command, mode: ~Search,     action: SearchForward         }
  # - { key: B,              mods: Command, mode: ~Search,     action: SearchBackward        }
